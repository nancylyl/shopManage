{"remainingRequest":"E:\\学习记录\\作业\\四阶段\\四阶段项目\\shopManage\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\学习记录\\作业\\四阶段\\四阶段项目\\shopManage\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\学习记录\\作业\\四阶段\\四阶段项目\\shopManage\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\学习记录\\作业\\四阶段\\四阶段项目\\shopManage\\src\\components\\content\\productdetails.vue?vue&type=template&id=8670f74e&scoped=true&","dependencies":[{"path":"E:\\学习记录\\作业\\四阶段\\四阶段项目\\shopManage\\src\\components\\content\\productdetails.vue","mtime":1595084499708},{"path":"E:\\学习记录\\作业\\四阶段\\四阶段项目\\shopManage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\学习记录\\作业\\四阶段\\四阶段项目\\shopManage\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\学习记录\\作业\\四阶段\\四阶段项目\\shopManage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\学习记录\\作业\\四阶段\\四阶段项目\\shopManage\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}